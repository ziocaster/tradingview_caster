// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © marcaster4 - Modificato per includere pattern detection, supporti/resistenze wick/volumi 
// e impostazioni per RSI, ATR e MACD con una sola etichetta per indicatore

//@version=5
indicator("casterv1.2", overlay=true)

// ----------------- Impostazioni -----------------
show_rsi            = input.bool(true,  title="Mostra RSI")
show_atr            = input.bool(true,  title="Mostra ATR")
show_macd           = input.bool(true,  title="Mostra MACD")
rsi_color           = input.color(color.blue,   title="Colore casella RSI")
atr_color           = input.color(color.orange, title="Colore casella ATR")
macd_color          = input.color(color.purple, title="Colore casella MACD")
label_frequency     = input.int(3, title="Ogni quante candele mostrare le etichette", minval=1)
always_show_current = input.bool(true,  title="Mostra sempre l'etichetta dell'ultima barra")

// ----------------- Variabili per etichette uniche -----------------
var label rsi_label_obj  = na
var label atr_label_obj  = na
var label macd_label_obj = na

// ----------------- Indicatori -----------------
// EMA 5 (red)
ema5 = ta.ema(close, 5)
plot(ema5, color=color.red, title="EMA 5")

// EMA 10 (yellow)
ema10 = ta.ema(close, 10)
plot(ema10, color=color.yellow, title="EMA 10")

// EMA 20 (green, Bollinger Bands)
ema20   = ta.ema(close, 20)
bb_upper = ema20 + 2 * ta.stdev(close, 20)
bb_lower = ema20 - 2 * ta.stdev(close, 20)
plot(ema20,   color=color.green,  title="EMA 20")
plot(bb_upper, color=color.green,  title="BB Upper 20")
plot(bb_lower, color=color.green,  title="BB Lower 20")

// EMA 50 (blue)
ema50 = ta.ema(close, 50)
plot(ema50, color=color.blue, title="EMA 50")

// EMA 200 (purple)
ema200 = ta.ema(close, 200)
plot(ema200, color=color.purple, title="EMA 200")

// ----------------- Calcolo Indicatori (RSI, ATR, MACD) -----------------
var float saved_rsi  = na
var float saved_atr  = na
var float saved_macd = na

if bar_index % label_frequency == 0 and barstate.isconfirmed
    saved_rsi  := ta.rsi(close, 14)
    saved_atr  := ta.atr(14)
    [macdLine, signalLine, _] = ta.macd(close, 12, 26, 9)
    saved_macd := macdLine - signalLine

// ----------------- Aggiornamento Etichette Uniche -----------------
shouldUpdate = (bar_index % label_frequency == 0) or (always_show_current and barstate.islast)
if shouldUpdate
    // RSI
    if show_rsi
        if na(rsi_label_obj)
            rsi_label_obj := label.new(bar_index, close + 3 * saved_atr, "RSI: " + str.tostring(saved_rsi, "#.##"), xloc=xloc.bar_index, yloc=yloc.price, color=rsi_color, textcolor=color.black, size=size.small)
        else
            label.set_xy(rsi_label_obj, bar_index, close + 3 * saved_atr)
            label.set_text(rsi_label_obj, "RSI: " + str.tostring(saved_rsi, "#.##"))
            label.set_color(rsi_label_obj, rsi_color)
            label.set_textcolor(rsi_label_obj, color.black)
    else
        if not na(rsi_label_obj)
            label.delete(rsi_label_obj)
            rsi_label_obj := na

    // ATR
    if show_atr
        if na(atr_label_obj)
            atr_label_obj := label.new(bar_index, close + 2 * saved_atr, "ATR: " + str.tostring(saved_atr, "#.##"),xloc=xloc.bar_index, yloc=yloc.price, color=atr_color, textcolor=color.black, size=size.small)
        else
            label.set_xy(atr_label_obj, bar_index, close + 2 * saved_atr)
            label.set_text(atr_label_obj, "ATR: " + str.tostring(saved_atr, "#.##"))
            label.set_color(atr_label_obj, atr_color)
            label.set_textcolor(atr_label_obj, color.black)
    else
        if not na(atr_label_obj)
            label.delete(atr_label_obj)
            atr_label_obj := na

    // MACD
    if show_macd
        if na(macd_label_obj)
            macd_label_obj := label.new(bar_index, close + 1 * saved_atr, "MACD: " + str.tostring(saved_macd, "#.##"),xloc=xloc.bar_index, yloc=yloc.price, color=macd_color, textcolor=color.black, size=size.small)
        else
            label.set_xy(macd_label_obj, bar_index, close + 1 * saved_atr)
            label.set_text(macd_label_obj, "MACD: " + str.tostring(saved_macd, "#.##"))
            label.set_color(macd_label_obj, macd_color)
            label.set_textcolor(macd_label_obj, color.black)
    else
        if not na(macd_label_obj)
            label.delete(macd_label_obj)
            macd_label_obj := na

// ----------------- Funzioni per Pattern Detection -----------------
// Helper per calcolare il massimo/minimo in un array
get_highest(arr) =>
    var float highest_val = na
    for i = 0 to array.size(arr) - 1
        val = array.get(arr, i)
        if na(highest_val) or val > highest_val
            highest_val := val
    highest_val

get_lowest(arr) =>
    var float lowest_val = na
    for i = 0 to array.size(arr) - 1
        val = array.get(arr, i)
        if na(lowest_val) or val < lowest_val
            lowest_val := val
    lowest_val

// Pattern di continuazione
symmetricalTriangle(highs, lows) =>
    apexHigh = get_highest(highs) == array.get(highs, 1)
    apexLow  = get_lowest(lows)  == array.get(lows, 1)
    apexHigh and apexLow

ascendingTriangle(highs, lows) =>
    (get_highest(highs) == array.get(highs, 1)) and (get_lowest(lows) == array.get(lows, 2))

cupAndHandle(highs, lows) =>
    (get_highest(highs) == array.get(highs, 2)) and (get_lowest(lows) == array.get(lows, 2)) and (array.get(highs, 0) > array.get(highs, 1)) and (array.get(lows, 0) > array.get(lows, 1))

flagPattern(highs, lows) =>
    (array.get(highs, 1) > array.get(highs, 0)) and (array.get(highs, 2) > array.get(highs, 1)) and (array.get(lows, 1) > array.get(lows, 0)) and (array.get(lows, 2) > array.get(lows, 1))

descendingTriangle(highs, lows) =>
    (get_lowest(lows) == array.get(lows, 1)) and (get_highest(highs) == array.get(highs, 2))

bullishPennant(highs, lows) =>
    (get_highest(highs) == array.get(highs, 1)) and (get_lowest(lows) == array.get(lows, 1))

bearishPennant(highs, lows) =>
    (get_highest(highs) == array.get(highs, 1)) and (get_lowest(lows) == array.get(lows, 1))

rectanglePattern(highs, lows) =>
    (get_highest(highs) == array.get(highs, 1)) and (get_lowest(lows) == array.get(lows, 2))

// Pattern di inversione
headAndShoulders(highs, lows) =>
    leftShoulder  = (array.get(highs, 2) > array.get(highs, 4)) and (array.get(highs, 2) > array.get(highs, 0)) and (array.get(lows, 1) < array.get(lows, 2)) and (array.get(lows, 1) < array.get(lows, 3))
    head          = (array.get(highs, 1) > array.get(highs, 2)) and (array.get(highs, 1) > array.get(highs, 3)) and (array.get(lows, 1) < array.get(lows, 2)) and (array.get(lows, 1) < array.get(lows, 3))
    rightShoulder = (array.get(highs, 0) > array.get(highs, 2)) and (array.get(highs, 0) > array.get(highs, 1)) and (array.get(lows, 0) < array.get(lows, 1)) and (array.get(lows, 0) < array.get(lows, 2))
    leftShoulder and head and rightShoulder

inverseHeadAndShoulders(highs, lows) =>
    leftShoulder  = (array.get(lows, 2) < array.get(lows, 4)) and (array.get(lows, 2) < array.get(lows, 0)) and (array.get(highs, 1) > array.get(highs, 2)) and (array.get(highs, 1) > array.get(highs, 3))
    head          = (array.get(lows, 1) < array.get(lows, 2)) and (array.get(lows, 1) < array.get(lows, 3)) and (array.get(highs, 1) > array.get(highs, 2)) and (array.get(highs, 1) > array.get(highs, 3))
    rightShoulder = (array.get(lows, 0) < array.get(lows, 2)) and (array.get(lows, 0) < array.get(lows, 1)) and (array.get(highs, 0) > array.get(highs, 1)) and (array.get(highs, 0) > array.get(highs, 2))
    leftShoulder and head and rightShoulder

doubleTop(highs) =>
    (array.get(highs, 0) < array.get(highs, 1)) and (array.get(highs, 1) > array.get(highs, 2)) and (array.get(highs, 2) < array.get(highs, 1))

doubleBottom(lows) =>
    (array.get(lows, 0) > array.get(lows, 1)) and (array.get(lows, 1) < array.get(lows, 2)) and (array.get(lows, 2) > array.get(lows, 1))

tripleTop(highs) =>
    (array.get(highs, 0) < array.get(highs, 1)) and (array.get(highs, 1) > array.get(highs, 2)) and (array.get(highs, 2) < array.get(highs, 1)) and (array.get(highs, 2) < array.get(highs, 3)) and (array.get(highs, 3) < array.get(highs, 1)) and (array.get(highs, 4) < array.get(highs, 1))

tripleBottom(lows) =>
    (array.get(lows, 0) > array.get(lows, 1)) and (array.get(lows, 1) < array.get(lows, 2)) and (array.get(lows, 2) > array.get(lows, 1)) and (array.get(lows, 2) > array.get(lows, 3)) and (array.get(lows, 3) > array.get(lows, 1)) and (array.get(lows, 4) > array.get(lows, 1))

// ----------------- Popolazione Array e Visualizzazione Pattern -----------------

// Inizializza gli array per gli highs e lows (ultime 7 barre)
highs = array.new_float(7, na)
lows  = array.new_float(7, na)

if barstate.islast
    for i = 0 to 6
        array.set(highs, i, high[i])
        array.set(lows,  i, low[i])
    
    // Pattern di continuazione
    if (symmetricalTriangle(highs, lows) or ascendingTriangle(highs, lows) or cupAndHandle(highs, lows) or flagPattern(highs, lows) or descendingTriangle(highs, lows) or bullishPennant(highs, lows) or  bearishPennant(highs, lows) or rectanglePattern(highs, lows))
        label.new(bar_index, close, text="continuazione", color=color.white, textcolor=color.new(color.green, 0), 
          style=label.style_label_down, size=size.small, textalign=text.align_center, tooltip="Pattern di continuazione")
    
    // Pattern di inversione
    if (headAndShoulders(highs, lows) or inverseHeadAndShoulders(highs, lows) or doubleTop(highs) or doubleBottom(lows) or tripleTop(highs) or tripleBottom(lows))
        label.new(bar_index, close, text="inversione", color=color.white, textcolor=color.black, 
          style=label.style_label_down, size=size.small, textalign=text.align_center, tooltip="Pattern di inversione")
    
    // Etichette specifiche per inversione up/down
    if (headAndShoulders(highs, lows) or doubleTop(highs) or tripleTop(highs))
        label.new(bar_index, close, text="inversione down", color=color.red, textcolor=color.white, 
          style=label.style_label_down, size=size.small, textalign=text.align_center, tooltip="Pattern di inversione down")
    if (inverseHeadAndShoulders(highs, lows) or doubleBottom(lows) or tripleBottom(lows))
        label.new(bar_index, close, text="inversione up", color=color.green, textcolor=color.white, 
          style=label.style_label_down, size=size.small, textalign=text.align_center, tooltip="Pattern di inversione up")

// ----------------- Supporto e Resistenza basati sul Volume -----------------

var float support_level    = na
var float resistance_level = na
var float support_found    = na
var float resistance_found = na

if barstate.islast
    var float max_volume_price = na
    var float max_volume       = na
    // Cerca il prezzo con il volume massimo negli ultimi 100 bar
    for i = 0 to 100
        vol = volume[i]
        if na(max_volume) or vol > max_volume
            max_volume       := vol
            max_volume_price := close[i]
    support_level    := max_volume_price * 0.97  // 3% sotto
    resistance_level := max_volume_price * 1.03  // 3% sopra
    support_found    := support_level
    resistance_found := resistance_level

if not na(support_found) and not na(resistance_found)
    line.new(x1=bar_index, y1=support_found, x2=bar_index + 100, y2=support_found, color=color.green, width=1, style=line.style_dotted)
    line.new(x1=bar_index, y1=resistance_found, x2=bar_index + 100, y2=resistance_found, color=color.red, width=1, style=line.style_dotted)

// ----------------- Supporto e Resistenza basati sui Wick delle Candele -----------------

wickPeriod     = input.int(50, title="Periodo wick per Supporto/Resistenza", minval=10)
wick_support   = ta.lowest(low, wickPeriod)
wick_resistance = ta.highest(high, wickPeriod)

plot(wick_support, title="Supporto Wick")
